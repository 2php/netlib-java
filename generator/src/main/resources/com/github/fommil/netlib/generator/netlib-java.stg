group netlib-java;

import "netlib-common.stg"

implClass(package, name, members, docs, parent) ::= <<
$copyright()$
package $package$;

/**
 * $docs$
 */
public class $name$ extends $parent$ {
  $members; separator="\n\n"$
}
>>

params(paramTypes, paramNames) ::= <<
$paramTypes,paramNames:{t,p|$t$ $p$};separator=", "$
>>

f2jImplMethod(returns, method, impl, paramTypes, paramNames, calls, return="return") ::= <<
@Override
public $returns$ $method$($params(paramTypes,paramNames)$) {
  $return$ $impl$($calls; separator=", "$);
}
>>


abstractMethod(return, method, paramTypes, paramNames, docs = "", returnDocs = "@return") ::= <<
/**
 * $docs$
 *
$paramNames:{n|  * @param $n$};separator="\n"$
 * $returnDocs$
 */
abstract public $return$ $method$($params(paramTypes,paramNames)$);
>>

abstractClass(package, name, members, docs, fallback, initCode = "") ::= <<
$copyright()$
package $package$;

/**
 * $docs$
 * <p>
 * Property {@value #PROPERTY_KEY} defines the implementation to load,
 * defaulting to {@value #FALLBACK}.
 * <p>
 * <i>This requires 1D column-major linearized arrays, as
 * expected by the lower level routines; contrary to
 * typical Java 2D row-major arrays.</i>
 */
@lombok.extern.java.Log
public abstract class $name$ {

  private static final String FALLBACK = "$fallback$";
  private static final String PROPERTY_KEY = "$package$.$name$";
  private static final $name$ INSTANCE;
  static {
    try {
      String className = System.getProperty(PROPERTY_KEY, FALLBACK);
      Class klass = Class.forName(className);
      INSTANCE = ($name$) klass.newInstance();
      log.config("Implementation provided by " + INSTANCE.getClass());
      $initCode$
    } catch (Exception e) {
      throw new ExceptionInInitializerError(e);
    }
  }

  /**
   * @return the environment-defined implementation.
   */
  public static $name$ getInstance() {
    return INSTANCE;
  }

  $members; separator="\n\n"$
}
>>

nativeImplMethod(returns, method, paramTypes, paramNames) ::= <<
@Override
public native $returns$ $method$($params(paramTypes,paramNames)$);
>>

nativeImplMethod_offsets(returns, method, paramTypes, paramNames, return="return ") ::= <<
@Override
public $returns$ $method$($params(paramTypes,paramNames)$) {
  $return$$method$_offsets($paramNames; separator=", "$);
}

public native $returns$ $method$_offsets($params(paramTypes,paramNames)$);
>>


unsupportedMethod(returns, method, paramTypes, paramNames) ::= <<
@Override
public $returns$ $method$($params(paramTypes,paramNames)$) {
  throw new UnsupportedOperationException();
}
>>

staticJniLoader(libs) ::= <<
static {
  com.github.fommil.jni.JniLoader.load("$libs; separator="\", \""$");
}
>>