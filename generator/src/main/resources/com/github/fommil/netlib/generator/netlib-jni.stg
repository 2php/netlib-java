group netlib-java;

import "netlib-common.stg"
import "netlib-java.stg"

include(files) ::= <<
$files:{f|#include <$f$>};separator="\n"$
>>

function(returns, fqn, init, clean, paramTypes, paramNames, assignReturn, return, params, name) ::= <<
JNIEXPORT $returns$ JNICALL Java_$fqn$ (JNIEnv * env, jobject calling_obj, $params(paramTypes,paramNames)$) {
  $init; separator="\n"$
  $assignReturn$$name$($params;separator=", "$);
  $clean; separator="\n"$
  $return$
}
>>

jni(includes, members) ::= <<
$copyright()$

#include <jni.h>
#include <netlib-jni.h>
$include(includes)$

$members; separator="\n\n"$
>>

array_init(type, name) ::= <<
$type$ * jni_$name$ = (*env)->GetPrimitiveArrayCritical(env, $name$, JNI_FALSE);
check_memory(env, jni_$name$);
>>

array_clean(name) ::= <<
(*env)->ReleasePrimitiveArrayCritical(env, $name$, jni_$name$, 0);
>>

jdoubleArray_init(name, type="jdouble") ::= "$array_init(type, name)$"
jdoubleArray_clean(name) ::= "$array_clean(name)$"
jfloatArray_init(name, type="jfloat") ::= "$array_init(type, name)$"
jfloatArray_clean(name) ::= "$array_clean(name)$"

jstring_init(name) ::= <<
char * jni_$name$ = (char *)(*env)->GetStringUTFChars(env, $name$, JNI_FALSE);
>>

jstring_clean(name) ::= <<
(*env)->ReleaseStringUTFChars(env, $name$, jni_$name$);
>>

jfloatw_init(name) ::= <<
jclass jni_$name$Class = (*env)->GetObjectClass(env, $name$);
jfieldID jni_$name$Id = (*env)->GetFieldID(env, jni_$name$Class, "val", "D");
jfloat jni_$name$ = (*env)->GetFloatField(env, $name$, jni_$name$Id);
>>

jfloatw_clean(name) ::= <<
(*env)->SetFloatField(env, $name$, jni_$name$Id, jni_$name$);
>>

jdoublew_init(name) ::= <<
jclass jni_$name$Class = (*env)->GetObjectClass(env, $name$);
jfieldID jni_$name$Id = (*env)->GetFieldID(env, jni_$name$Class, "val", "D");
jdouble jni_$name$ = (*env)->GetDoubleField(env, $name$, jni_$name$Id);
>>

jdoublew_clean(name) ::= <<
(*env)->SetDoubleField(env, $name$, jni_$name$Id, jni_$name$);
>>

