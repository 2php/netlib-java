// http://www.antlr.org/wiki/display/ST4/Group+file+syntax
// http://www.antlr.org/wiki/display/ST4/Templates

group netlib-java;

copyright() ::= <<
/* Copyright 2013 Samuel Halliday (autogenerated Java and JNI API).
 * Copyright 2003-2007 Keith Seymour (Fortran to Java translation).
 * Copyright 1992-2007 The University of Tennessee. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 * - Redistributions of source code must retain the above copyright
 *   notice, this list of conditions and the following disclaimer.
 *
 * - Redistributions in binary form must reproduce the above copyright
 *   notice, this list of conditions and the following disclaimer listed
 *   in this license in the documentation and/or other materials
 *   provided with the distribution.
 *
 * - Neither the name of the copyright holders nor the names of its
 *   contributors may be used to endorse or promote products derived from
 *   this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
>>

implClass(package, name, members, docs, parent) ::= <<
$copyright()$
package $package$;

/**
 * $docs$
 */
public class $name$ extends $parent$ {
  $members; separator="\n\n"$
}
>>


f2jImplMethod(returns, method, impl, params, calls, return="return") ::= <<
@Override
public $returns$ $method$($params; separator=", "$) {
  $return$ $impl$($calls; separator=", "$);
}
>>


abstractMethod(return, method, params, docs = "") ::= <<
/**
 * $docs$
 *
 * TODO: @param list
 */
abstract public $return$ $method$($params; separator=", "$);
>>

abstractClass(package, name, members, docs, fallback, initCode = "") ::= <<
$copyright()$
package $package$;

/**
 * $docs$
 * <p>
 * Property {@value #PROPERTY_KEY} defines the implementation to load,
 * defaulting to {@value #FALLBACK}.
 */
@lombok.extern.java.Log
public abstract class $name$ {

  private static final String FALLBACK = "$fallback$";
  private static final String PROPERTY_KEY = "$package$.$name$";
  private static final $name$ INSTANCE;
  static {
    try {
      String className = System.getProperty(PROPERTY_KEY, FALLBACK);
      Class klass = Class.forName(FALLBACK);
      INSTANCE = ($name$) klass.newInstance();
      log.config("Implementation provided by " + INSTANCE.getClass());
      $initCode$
    } catch (Exception e) {
      throw new ExceptionInInitializerError(e);
    }
  }

  /**
   * @return the environment-defined implementation.
   */
  public static $name$ getInstance() {
    return INSTANCE;
  }

  $members; separator="\n\n"$
}
>>
